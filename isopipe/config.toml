[metadata]
name = "isopipe"
version = "0.0.1"
authors = "alejandrogzi <alejandrxgzi@gmail.com>"
repository = "https://github.com/alejandrogzi/isopipe"
readme = "README.md"
run_id = ""                                            # WARN: leave empty

[packages]
lima = "1.11.0"
pbccs = "6.4.0"
isoseq = "4.0.0"
minimap2 = "2.26"
isotools = "0.0.1"
pbindex = "1.7.0"
samtools = "1.14"
perl = ""
python3 = ""

[global]
data_prefix = "foo"                   # FILL: raw data prefix
global_output_dir = "/path/to/outdir" # FILL: output dir -> {outdir}/isopipe_run_{timestamp}
long_queue = "long"                   # AWARE: long queue name
short_queue = "day"                   # AWARE: short queue name
default_memory = 16                   # default memory in GB
default_threads = 8                   # default number of threads

[params.ccs]
chunk = 100                # --chunk
num-threads = 1            # -j
num-cores = 1              # FILL | WARN: HPC [per job]
min-rq = 0.95              # --min-rq
report-file = "TMP_report" # --report-file
output_dir = "step1_ccs"   # output dir
input_dir = ""             # FILL: raw data dir [only one inmutable]
memory = 50                # memory in GB
time = "24.h"              # time for each job
log-level = "DEBUG"        # log-level [DEBUG]

[params.lima]
isoseq = ""               # WARN: leave empty and position
peek-guess = ""           # WARN: leave empty and position
primers = ""              # FILL: primers file
output_dir = "step2_lima" # output dir [default]
input_dir = "step1_ccs"   # previous step data dir [default]
memory = 50               # memory in GB
time = "24.h"             # time for each job
num-threads = 64          # -j
chunk-size = 100          # --chunk-size, each thread consumes N ZMWs per chunk
log-level = "DEBUG"       # log-level [DEBUG]

[params.refine]
primers = ""                # FILL: primers file
output_dir = "step3_refine" # output dir
input_dir = "step2_lima"    # previous step data dir [default]
memory = 50                 # memory in GB
num-threads = 64            # --num-threads
num-cores = 64              # WARN: HPC
time = "24.h"               # time for each job
log-level = "DEBUG"         # log-level [DEBUG]


[params.cluster]
singletons = ""                # WARN: leave empty
verbose = ""                   # WARN: leave empty [verbosity as default]
output_dir = "step4_cluster"   # output dir
input_dir = "step3_refine"     # previous step data dir [default]
memory = 50                    # memory in GB
num-threads = 64               # --num-threads [higher the better]
num-cores = 64                 # WARN: HPC
time = "24.h"                  # time for each job
log-file = "step4_cluster.log" # log file
log-level = "DEBUG"            # log-level [DEBUG]

[params.minimap2]
G = "1600k"                  # max intron size
a = ""                       # output in the SAM format, empty
c = ""                       # WARN: output CIGAR in PAF, leave empty
eqx = ""                     # WARN: write =/X CIGAR operators, leave empty
ax = "splice:hq"             # long-read/Pacbio-CCS spliced alignment
uf = ""                      # WARN: how to find GT-AG. f:transcript strand, leave empty
secondary = "no"             # output secondary alignments
C5 = ""                      # WARN: splice:hq, leave empty
cs = "long"                  # output the cs tag
output_dir = "step5_minimap" # output dir
input_dir = "step4_cluster"  # previous step data dir [default]
memory = 50                  # memory in GB
t = 128                      # --num-threads [higher the better]
time = "24.h"                # time for each job
genome = ""                  # FILL: genome in .fa format or .2bit
junc-bed = ""                # FILL: reference annotation in .bed format

[params.polya]
input_dir = "step5_minimap" # previous step data dir [default]
output_dir = "step6_polya"  # output dir
perID = 96                  # --per_id
clip3 = 50                  # --clip3
polyAReadSuffix = 30        # --suffix
memory = 50                 # memory in GB
time = "24.h"               # time for each job
toga = ""                   # FILL: toga query annotation
assembly = ""               # FILL: assembly name [WILL CHANGE]
